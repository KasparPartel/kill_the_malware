package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"strings"

	"golang.org/x/sys/windows/registry"
)

type RegistryObject struct {
	Key  registry.Key
	Path string
}

func main() {
	// Logging to file
	logFile := openLogFile()
	defer logFile.Close()
	log.SetOutput(logFile)

	processName := "mal-track.exe"

	pid, err := getPID(processName)
	if err != nil {
		fmt.Fprintln(os.Stderr, "could not get the pid")
		log.Fatal(err)
	}

	path, err := getProcessPath(pid)
	if err != nil {
		fmt.Fprintln(os.Stderr, "could not get the process path")
		log.Fatal(err)
	}

	ip, err := getIP(path)
	if err != nil {
		fmt.Fprintln(os.Stderr, "could not find the ip")
		log.Println(err)
	}

	fmt.Printf("The attacker's IP address is %s\n", ip)

	if pid != -1 {
		process, err := os.FindProcess(pid)
		if err != nil {
			log.Println(err)
		}

		err = process.Kill()
		if err != nil {
			log.Println(err)
		}
	}

	registryKeys := []RegistryObject{
		{registry.CURRENT_USER, `Software\Microsoft\Windows\CurrentVersion\Run`},
		{registry.CURRENT_USER, `Software\Microsoft\Windows\CurrentVersion\RunOnce`},
		{registry.LOCAL_MACHINE, `Software\Microsoft\Windows\CurrentVersion\Run`},
		{registry.LOCAL_MACHINE, `Software\Microsoft\Windows\CurrentVersion\RunOnce`},
	}

	editRegistries(registryKeys)
}

// openLogFile opens the file with WRITE access and returns the file.
// This function does not close the file.
func openLogFile() *os.File {
	logFile, err := os.OpenFile(
		"log.log",
		os.O_CREATE|os.O_APPEND|os.O_WRONLY,
		0666,
	)
	if err != nil {
		log.Fatal(err)
	}
	return logFile
}

// getPID returns the PID of a process or error.
func getPID(processName string) (int, error) {
	cmd := exec.Command("cmd", "/C", "tasklist", "/fo", "CSV", "/nh")
	out, err := cmd.Output()
	if err != nil {
		return -1, fmt.Errorf("error running tasklist: %s", err.Error())
	}

	re := regexp.MustCompile(fmt.Sprintf(`"%s","(\d+)`, processName))
	capturingGroups := re.FindStringSubmatch(string(out))

	if len(capturingGroups) < 2 {
		return -1, fmt.Errorf("PID not found")
	}

	pidInt, err := strconv.Atoi(capturingGroups[1])
	if err != nil {
		return -1, fmt.Errorf("PID not available: %s", err.Error())
	}

	return pidInt, nil
}

// getProcessPath returns the path of a running process or error.
func getProcessPath(pid int) (string, error) {
	cmd := exec.Command(
		"powershell",
		"/C",
		"Get-Process",
		"-Id",
		strconv.Itoa(pid),
		"|",
		"Select-Object",
		"-ExpandProperty",
		"Path",
	)
	out, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("error running Get-Process: %s", err.Error())
	}

	path := strings.Join(strings.Split(string(out), "\\"), "/")

	return strings.TrimSpace(path), nil
}

// getIP searches the file for IP address.
// It takes in the filepath.
// It returns the IP address or error.
func getIP(filePath string) (string, error) {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return "", fmt.Errorf("error reading file: %w", err)
	}

	dataStr := string(data)
	re := regexp.MustCompile(`\b(?:\d{1,3}\.){3}\d{1,3}\b:\d+\b`)
	matches := re.FindAllString(dataStr, -1)
	var ip string

	if len(matches) > 0 {
		for _, match := range matches {
			ip = match
		}
	} else {
		ip = ""
	}

	return ip, nil
}

// editRegistries removes the values from the keys in Windows Registry.
// If the keys belong to another user, you must run the program as administrator.
func editRegistries(registryKeys []RegistryObject) {
	for _, regKey := range registryKeys {
		k, err := registry.OpenKey(
			regKey.Key,
			regKey.Path,
			registry.WRITE,
		)
		if err != nil {
			log.Println("couldn't find the registry key: ", err)
		}
		defer k.Close()

		err = k.DeleteValue("Mal-Track")
		if err != nil {
			log.Println("couldn't find the value: ", err)
		}
	}
}
