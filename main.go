package main

import (
	"errors"
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"time"

	"golang.org/x/sys/windows/registry"
)

func openLogFile() *os.File {
	formattedDate := time.Now().Format("15-06-2006")
	logFile, err := os.OpenFile(
		fmt.Sprintf("log_%s.log", formattedDate), os.O_CREATE|os.O_APPEND|os.O_WRONLY,
		0666,
	)
	if err != nil {
		log.Fatal(err)
	}
	return logFile
}

func getPID(processName string) (int, error) {
	cmd := exec.Command("cmd", "/C", "tasklist", "/fo", "CSV", "/nh")
	out, err := cmd.Output()
	if err != nil {
		return -1, errors.New(fmt.Sprintf("Error running tasklist: %s", err.Error()))
	}

	re := regexp.MustCompile(fmt.Sprintf(`"%s","(\d+)`, processName))
	capturingGroups := re.FindStringSubmatch(string(out))

	if len(capturingGroups) < 2 {
		return -1, errors.New(fmt.Sprintf("PID not found"))
	}

	pidInt, err := strconv.Atoi(capturingGroups[1])
	if err != nil {
		return -1, errors.New(fmt.Sprintf("PID not available: %s", err.Error()))
	}

	return pidInt, nil
}

func editRegistries() {
	k, err := registry.OpenKey(
		registry.LOCAL_MACHINE,
		`\Software\Microsoft\Windows\CurrentVersion\Run`,
		registry.QUERY_VALUE,
	)
	if err != nil {
		log.Fatal(err)
	}
	defer k.Close()

	s, _, err := k.GetStringValue("SystemRoot")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%q\n", s)
}

func main() {
	// Logging
	logFile := openLogFile()
	defer logFile.Close()
	log.SetOutput(logFile)

	// processName := "maltrack.exe"
	processName := "12312123.exe"
	fmt.Println("Getting pid of", processName)
	pid, err := getPID(processName)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(pid)

	process, err := os.FindProcess(pid)
	if err != nil {
		log.Println(err)
	}

	process.Kill()
}
